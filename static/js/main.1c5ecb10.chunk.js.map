{"version":3,"sources":["pages/Home.js","pages/Resume.js","pages/AboutMe.js","pages/Project.js","pages/Contact.js","RouteAll.js","components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["Home","Resume","AboutMe","Project","Contact","RouteAll","exact","path","component","Menu","className","title","scroll","to","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6QAQeA,MANf,WACI,OAAQ,6BACI,sCCKDC,EARA,WACX,OACI,6BACI,wCCMGC,EATC,WACZ,OACI,6BAEI,yCCIGC,EARC,WACZ,OACI,6BACI,yCCMGC,EATC,WACZ,OACI,6BAEI,yCCcGC,EAZE,WACb,OAAQ,oCACJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAQO,KAAK,UAAUC,UAAWP,IAClC,kBAAC,IAAD,CAAQM,KAAK,SAASC,UAAWN,IACjC,kBAAC,IAAD,CAAQK,KAAK,WAAWC,UAAWL,IACnC,kBAAC,IAAD,CAAQI,KAAK,WAAWC,UAAWJ,OCmBhCK,EA7BF,WACT,OACI,yBAAKC,UAAU,oBACX,kBAAC,SAAD,KACI,kBAAC,SAAD,CAAQC,MAAM,QAAQC,QAAM,GACxB,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAMC,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,WACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAGR,kBAAC,SAAD,CAAQF,MAAM,SACV,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAME,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,WACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAGR,kBAAC,UAAD,KACI,yBAAKH,UAAU,iBACf,kBAAC,EAAD,UCfLI,MANf,WACE,OAAQ,oCACN,kBAAC,EAAD,Q,YCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAENC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1c5ecb10.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Home() {\r\n    return (<div>\r\n                <h1>Home</h1>\r\n           </div>)\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react'\r\nconst Resume = () => {\r\n    return (\r\n        <div>\r\n            <h1>Resume</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Resume\r\n","import React from 'react'\r\nconst AboutMe = () => {\r\n    return (\r\n        <div>\r\n              \r\n            <h1>AboutMe</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AboutMe\r\n","import React from 'react'\r\nconst Project = () => {\r\n    return (\r\n        <div>\r\n            <h1>Project</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Project\r\n","import React from 'react'\r\nconst Contact = () => {\r\n    return (\r\n        <div>\r\n          \r\n            <h1>Contact</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact\r\n","import React from 'react'\r\nimport {Route, Switch,} from 'react-router-dom';\r\nimport Home from './pages/Home';\r\nimport Resume from './pages/Resume';\r\nimport AboutMe from './pages/AboutMe';\r\nimport Project from './pages/Project';\r\nimport Contact from './pages/Contact';\r\nconst RouteAll = () => {\r\n    return (<>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route  path=\"/resume\" component={Resume} />\r\n            <Route  path=\"/about\" component={AboutMe} />\r\n            <Route  path=\"/project\" component={Project} />\r\n            <Route  path=\"/contact\" component={Contact} />\r\n        </Switch>\r\n    </>)\r\n}\r\n\r\nexport default RouteAll;\r\n","import React from 'react'\r\nimport {Layout, Header, Navigation, Drawer, Content} from 'react-mdl';\r\nimport {Link} from 'react-router-dom';\r\nimport RouterAll from '../RouteAll'\r\nconst Menu = () => {\r\n    return (\r\n        <div className=\"demo-big-content\">\r\n            <Layout>\r\n                <Header title=\"Title\" scroll>\r\n                    <Navigation>\r\n                        <Link to=\"/resume\">Resume</Link>\r\n                        <Link to=\"/about\">About me</Link>\r\n                        <Link to=\"/project\">Project</Link>\r\n                        <Link to=\"/contact\">Contact</Link>\r\n                    </Navigation>\r\n                </Header>\r\n                <Drawer title=\"Title\">\r\n                    <Navigation>\r\n                        <Link to=\"/resume\">Resume</Link>\r\n                        <Link to=\"/about\">About me</Link>\r\n                        <Link to=\"/project\">Project</Link>\r\n                        <Link to=\"/contact\">Contact</Link>\r\n                    </Navigation>\r\n                </Drawer>\r\n                <Content>\r\n                    <div className=\"page-content\" />\r\n                    <RouterAll/>\r\n                </Content>\r\n            </Layout>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Menu\r\n","import React from 'react';\n\nimport './App.css';\nimport Menu from './components/Menu'\n\nfunction App() {\n  return (<>\n    <Menu/>\n  </>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}